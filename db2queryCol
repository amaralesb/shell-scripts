#!/bin/bash


#IMPORTANTE
## Coloque este script en el mismo directorio de las variables que editara a continuación.
#

###########################
#*************************#
#                         #
#     EDITE SOLO LOS      #
#      DIRECTORIOS        #
#       Y LA CONSULTA     # 
#                         #
#*************************#
###########################

## Se conectará a BD, se hará query y el resultado de la consulta se enviará a select.txt.
## Las extensiones kk; ktmp se tomaron de manera arbitraria para almacenar datos temporales.

echo "Script en ejecución."
# Se definen variables.
# Variables de BD
DB_USER="db2ins01"
DB_PASS="curso"
DB_NAME="SAMPLE"
# Variables de directorios
archivo1="/home/db2ma/select.txt"
temp1="/home/db2ma/archivo1_temp.kk"
modif1="/home/db2ma/archivo1_modificado.kk"
cabec="/home/db2ma/cabeceras.kk"
output_file="Result.txt"

echo "Variables declaradas."
echo "Conectando a Base de datos."

## Conectar a BD y obtener archivo de salida
db2 connect to $DB_NAME user $DB_USER using $DB_PASS


echo "Ejecutando consulta."
# Ejecutar consulta sin uso de flags. Ex: -v, -x
db2 "SELECT * FROM syscat.tablespaces" > $archivo1

# Desconectando de la base de datos
db2 connect reset




###########################
#*************************#
#   MEJOR NO EDITAR       #
#*************************#
###########################

##Comprendemos que la estructura del archivo que devuelve la consulta DB2 tiene un formato fijo.
##Procederemos a limpiar este archivo para dejar solo lo necesario.

#  Paso 1: 
#  Enviando archivo de salida de la consulta a un archivo temporal 

sed '1d; 3d' $archivo1 > $temp1  # Eliminando 1ra y 3ra fila y enviando a archivo1_temp.kk
sed -i '$d' $temp1               # Eliminando ultima linea y enviando a archivo1_temp.kk
sed -i '$d' $temp1               # Eliminando ultima linea y enviando a archivo1_temp.kk
sed -i '$d' $temp1               # Eliminando nuevamente ultima linea y enviando a archivo1_temp.kk
awk '{gsub(/[[:space:]]+/, "||")} 1' $temp1 > $modif1  ## reemplazando los espacios por || 
## y esta ves se envia todo a archivo1_modificado.
### La eliminación de las ultimas lineas se hicieron una a la ves porque no daba el resultado
### esperado si se eliminaban en la misma sentencia.

 


# Paso 2: 
## En este extraemos la primera linea del archivo archivo1_modificado que serian los nombres de las columnas
## y las enviamos a un nuevo archivo llamado cabeceras.kk

echo "Creando estructura de archivos....."

# Extrayendo la primera fila de archivo1.txt y moverla a cabeceras.txt
head -n 1 $modif1 > $cabec

# Borrar la primera fila de archivo1_modificado.
sed -i '1d' $modif1

## Resumiendo: En este paso creamos un nuevo archivo llamado "cabeceras.kk"
## a el enviamos 1ra fila del "archivo1_modificado", los nombres de columnas.
## Luego borramos esa fila de "archivo1_modificado".
## Quedarian dos archivos, uno con la fila de los nombres de las columnas
## Un segundo archivo con solo los datos de la consulta.



# Paso 3: 
### En este paso el objetivo es crear un archivo temporal por cada fila de datos en archivo1_modificado

echo "Creando temporales."
echo " "
echo " "
echo "=============================="


cabeceras=$(cat $cabec) # Leyendo cabecera

# Creramos una variable para contar los archivos temporales y la inicializamos en 1.
counter=1

# Leer archivo1_modificado.kk línea por línea
while IFS= read -r linea; do   #bucle que lee líneas de un archivo una por una y se guardan en "linea"
    # Crear un archivo temporal
    nombre_archivo_temporal="temp_${counter}.ktmp"
    
    # Escribir la cabecera y la línea actual en el archivo temporal
    echo "$cabeceras" > "$nombre_archivo_temporal"
    echo "$linea" >> "$nombre_archivo_temporal"
    
    # Incrementar el contador
    counter=$((counter + 1))
done < $modif1





# Paso 4:
 
# Manipulando archivos utilizando métodos de transformación de cadenas.

# Limpiando archivo de salida.
: > "$output_file"

# Procesando cada archivo temporal. Se lee en bucle cada archivo en el directorio
# con la extensión .ktmp
for input_file in *.ktmp; do
    
# Leer las filas del archivo $input_file y almacenar el contenido en arrays "filas" 
# "-t"Se elimina las nuevas líneas al final de cada línea leída.
    mapfile -t filas < "$input_file"

#  Dividiendo la primera línea de "filas" en elementos utilizando || como separador.
#  Luego, almacena esos elementos en el array "fila1".
    IFS='||' read -r -a fila1 <<< "${filas[0]}"
	
#  Dividiendo la primera línea de "filas" en elementos utilizando || como separador.
#  Luego, almacena esos elementos en el array "fila2".
    IFS='||' read -r -a fila2 <<< "${filas[1]}"

## Combinar las palabras de ambas filas en columnas y añadir al archivo de salida.
#  Inicia un bucle "for" que recorre los elementos del array "fila1". 
#  El número de iteraciones está determinado por la longitud del array "fila1". 
    for ((i=0; i<${#fila1[@]}; i++)); do 
	
# En cada iteración, se imprime una línea que combina el elemento i de fila1 y fila2.
# (\t) insertar un espacio de tabulación horizontal en una cadena de texto. 
# Este espacio de tabulación se usa para alinear texto en columnas.	
        echo -e "${fila1[$i]}.                  \t${fila2[$i]}" >> "$output_file"
    done

# Añadir un separador entre archivos temporales.
    echo "----------------------------------" >> "$output_file"
done

# Eliminar la última línea con '----------------------------------' del archivo de salida
sed -i '$d' "$output_file"

# Mostrar el contenido del archivo de salida
cat "$output_file"


#Pacotilla tecnologica
echo "=========================================================="
echo "El archivo con los resultados se nombra Result.txt"
echo "----------------------------------------------------------"
echo "Sistema de Reportes para DB2. KnowHow™ | Team Junior 2024" 
echo "=========================================================="
echo " "
echo " "

# Limpiando temporales
rm -f *.ktmp *.kk




